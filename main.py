import logging
import os
import datetime
import psycopg2
from psycopg2.extras import RealDictCursor
from dotenv import load_dotenv
import telebot
from telebot import types
from math import radians, cos, sin, asin, sqrt

# Load environment variables
load_dotenv()

token = os.getenv("BOT_TOKEN")
primary_admin_id = 1747953120  # –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω

# Database config
db_config = {
    'dbname': os.getenv("DB_NAME"),
    'user': os.getenv("DB_USER"),
    'password': os.getenv("DB_PASSWORD"),
    'host': os.getenv("DB_HOST"),
    'port': os.getenv("DB_PORT"),
}

# Geo settings
TARGET_LAT = float(os.getenv("TARGET_LAT", "41.356015"))
TARGET_LON = float(os.getenv("TARGET_LON", "69.314663"))
RADIUS_METERS = float(os.getenv("RADIUS_METERS", "150"))

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger()

# Initialize bot
bot = telebot.TeleBot(token)

# Global state
admin_state = {}
broadcast_history = []  # store {(chat_id, message_id)}

# Database helpers

def get_db_connection():
    return psycopg2.connect(**db_config)

def init_db():
    with get_db_connection() as conn:
        with conn.cursor() as cur:
            cur.execute("CREATE TABLE IF NOT EXISTS admins(user_id BIGINT PRIMARY KEY)")
            cur.execute("INSERT INTO admins(user_id) VALUES(%s) ON CONFLICT DO NOTHING", (primary_admin_id,))
            conn.commit()

def is_admin(user_id: int) -> bool:
    with get_db_connection() as conn:
        with conn.cursor() as cur:
            cur.execute("SELECT 1 FROM admins WHERE user_id=%s", (user_id,))
            return cur.fetchone() is not None

def add_admin(user_id: int):
    with get_db_connection() as conn:
        with conn.cursor() as cur:
            cur.execute("INSERT INTO admins(user_id) VALUES(%s) ON CONFLICT DO NOTHING", (user_id,))
            conn.commit()

def remove_admin(user_id: int):
    if user_id == primary_admin_id: return False
    with get_db_connection() as conn:
        with conn.cursor() as cur:
            cur.execute("DELETE FROM admins WHERE user_id=%s", (user_id,))
            conn.commit()
    return True

def list_admins():
    with get_db_connection() as conn:
        with conn.cursor() as cur:
            cur.execute("SELECT user_id FROM admins")
            return [row[0] for row in cur.fetchall()]

# Utility: distance
def calculate_distance(lat1, lon1, lat2, lon2):
    R = 6371000
    dlat = radians(lat2 - lat1)
    dlon = radians(lon2 - lon1)
    a = sin(dlat/2)**2 + cos(radians(lat1))*cos(radians(lat2))*sin(dlon/2)**2
    return R*2*asin(sqrt(a))

# Keyboards
def main_menu_markup(user_id):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–£—á–∞—Å—Ç–∏–µ‚úÖ", "–ë–∞–ª–ª—ãüìä")
    if is_admin(user_id):
        kb.add("–¢–µ–∫—Å—Ç‚úâÔ∏è", "–§–æ—Ç–æüñºÔ∏è", "–í–∏–¥–µ–æüìπ")
        kb.add("–§–∞–π–ªüìé", "–õ–æ–∫–∞—Ü–∏—èüìç")
        kb.add("–ò–∑–º–µ–Ω–∏—Ç—åüìå", "–£–¥–∞–ª–∏—Ç—å‚úÇÔ∏è")
        if user_id == primary_admin_id:
            kb.add("–ù–∞–∑–Ω–∞—á–∏—Ç—åüëë", "–°–Ω—è—Ç—åüëë")
    return kb

def location_request_markup():
    kb = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    kb.add(types.KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å", request_location=True))
    return kb

# Handlers
@bot.message_handler(commands=['start'])
def cmd_start(m):
    uid=m.from_user.id; name=m.from_user.first_name or m.from_user.username
    with get_db_connection() as conn:
        with conn.cursor() as cur:
            cur.execute("INSERT INTO users(user_id,name) VALUES(%s,%s) ON CONFLICT DO NOTHING",(uid,name));conn.commit()
    m_text=f"–ü—Ä–∏–≤–µ—Ç, {name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ YES PLUS."
    bot.send_message(m.chat.id, m_text, reply_markup=main_menu_markup(uid))

@bot.message_handler(func=lambda m:m.text=="–ë–∞–ª–ª—ãüìä")
def cmd_score(m):
    uid=m.from_user.id
    with get_db_connection() as conn:
        with conn.cursor() as cur:
            cur.execute("SELECT points FROM users WHERE user_id=%s",(uid,));res=cur.fetchone()
    txt=f"–£ —Ç–µ–±—è {res[0]} –±–∞–ª–ª–æ–≤." if res else "–ó–∞–ø–∏—à–∏—Å—å —á–µ—Ä–µ–∑ –£—á–∞—Å—Ç–∏–µ‚úÖ"
    bot.send_message(m.chat.id, txt, reply_markup=main_menu_markup(uid))

@bot.message_handler(func=lambda m:m.text=="–£—á–∞—Å—Ç–∏–µ‚úÖ")
def cmd_confirm(m):
    bot.send_message(m.chat.id, "–û—Ç–ø—Ä–∞–≤—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:", reply_markup=location_request_markup())

@bot.message_handler(content_types=['location'])
def handle_loc(m):
    uid=m.from_user.id
    if is_admin(uid) and admin_state.get(m.chat.id): return admin_state_handler(m)
    lat,lon=m.location.latitude,m.location.longitude; dist=calculate_distance(lat,lon,TARGET_LAT,TARGET_LON)
    with get_db_connection() as conn:
        with conn.cursor() as cur:
            cur.execute("SELECT points,last_checkin FROM users WHERE user_id=%s",(uid,));d=cur.fetchone()
    if not d: return bot.send_message(m.chat.id,"–°–Ω–∞—á–∞–ª–∞ –£—á–∞—Å—Ç–∏–µ‚úÖ")
    pts,last=d; today=datetime.date.today()
    if last==today: txt="–°–µ–≥–æ–¥–Ω—è —É–∂–µ —É—á—Ç–µ–Ω–æ."
    elif dist<=RADIUS_METERS: cur=conn.cursor();new=pts+20;cur.execute("UPDATE users SET points=%s,last_checkin=%s WHERE user_id=%s",(new,today,uid));conn.commit();txt="–£—á–∞—Å—Ç–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!"
    else: txt="–í–Ω–µ –∑–æ–Ω—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."
    bot.send_message(m.chat.id, txt, reply_markup=main_menu_markup(uid))

# Admin commands: text, photo, video, file, location, change, delete msgs, assign, remove
@bot.message_handler(func=lambda m: is_admin(m.from_user.id) and m.text in ["–¢–µ–∫—Å—Ç‚úâÔ∏è","–§–æ—Ç–æüñºÔ∏è","–í–∏–¥–µ–æüìπ","–§–∞–π–ªüìé","–õ–æ–∫–∞—Ü–∏—èüìç","–ò–∑–º–µ–Ω–∏—Ç—åüìå","–£–¥–∞–ª–∏—Ç—å‚úÇÔ∏è","–ù–∞–∑–Ω–∞—á–∏—Ç—åüëë","–°–Ω—è—Ç—åüëë"])
def admin_cmd(m):
    action_map={
        "–¢–µ–∫—Å—Ç‚úâÔ∏è":"text","–§–æ—Ç–æüñºÔ∏è":"photo","–í–∏–¥–µ–æüìπ":"video","–§–∞–π–ªüìé":"file",
        "–õ–æ–∫–∞—Ü–∏—èüìç":"loc","–ò–∑–º–µ–Ω–∏—Ç—åüìå":"setloc","–£–¥–∞–ª–∏—Ç—å‚úÇÔ∏è":"clear","–ù–∞–∑–Ω–∞—á–∏—Ç—åüëë":"assign","–°–Ω—è—Ç—åüëë":"remove_admin"
    }
    cmd=action_map[m.text]
    admin_state[m.chat.id]={'action':cmd,'step':1,'data':{}}
    prompts={
        'text':'–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:',
        'photo':'–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∏–ª–∏ URL:',
        'video':'–ü—Ä–∏—à–ª–∏ –≤–∏–¥–µ–æ –∏–ª–∏ URL:',
        'file':'–ü—Ä–∏—à–ª–∏ —Ñ–∞–π–ª –∏–ª–∏ URL:',
        'loc':'–û—Ç–ø—Ä–∞–≤—å –ª–æ–∫–∞—Ü–∏—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:',
        'setloc':'–ù–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: lat lon radius',
        'clear':'–°–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π —É–¥–∞–ª–∏—Ç—å?',
        'assign':'User_id –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞:',
        'remove_admin':'–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:\n'+"\n".join(str(a) for a in list_admins())+"\n–í–≤–µ–¥–∏ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
    }
    bot.send_message(m.chat.id, prompts[cmd])

@bot.message_handler(content_types=['text','photo','video','document','location'])
def admin_state_handler(m):
    state=admin_state.get(m.chat.id)
    if not state: return
    a=state['action']; step=state['step']
    # Broadcast text
    if a=='text':
        if step==1:
            state['data']['text']=m.text; state['step']=2; return bot.send_message(m.chat.id,'–†–∞—Å—Å—ã–ª–∫–∞? –¥–∞/–Ω–µ—Ç')
        if m.text.lower()=='–¥–∞': cnt=0; text=state['data']['text']
        for (uid,) in get_db_connection().cursor().execute("SELECT user_id FROM users"):
            try: msg=bot.send_message(uid,text); broadcast_history.append((uid,msg.message_id)); cnt+=1
            except: pass
        bot.send_message(m.chat.id,f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {cnt}")
        admin_state.pop(m.chat.id)
    # Clear broadcast messages
    elif a=='clear':
        if step==1:
            try: n=int(m.text); state['step']=2; state['data']['n']=n; return bot.send_message(m.chat.id,'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ? –¥–∞/–Ω–µ—Ç')
            except: return bot.send_message(m.chat.id,'–ß–∏—Å–ª–æ?')
        if m.text.lower()=='–¥–∞': cnt=0
            for uid,msg_id in broadcast_history[-state['data']['n']:]:
                try: bot.delete_message(uid,msg_id); cnt+=1
                except: pass
            bot.send_message(m.chat.id,f"–£–¥–∞–ª–µ–Ω–æ {cnt}")
        admin_state.pop(m.chat.id)
    # Assign admin
    elif a=='assign' and step==1:
        try: add_admin(int(m.text)); bot.send_message(m.chat.id,'–î–æ–±–∞–≤–ª–µ–Ω');
        except: bot.send_message(m.chat.id,'–û—à–∏–±–∫–∞'); admin_state.pop(m.chat.id)
    # Remove admin
    elif a=='remove_admin' and step==1:
        try: uid=int(m.text)
            if remove_admin(uid): bot.send_message(m.chat.id,'–£–¥–∞–ª—ë–Ω')
            else: bot.send_message(m.chat.id,'–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ')
        except: bot.send_message(m.chat.id,'–û—à–∏–±–∫–∞')
        admin_state.pop(m.chat.id)
    # Other media and loc and setloc omitted for brevity...

# Init and start
if __name__=='__main__':
    init_db(); logger.info('Bot started'); bot.infinity_polling()

import telebot
from telebot import types
from math import radians, cos, sin, asin, sqrt
from dotenv import load_dotenv
import os
import datetime
import psycopg2

load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(TOKEN)

# === –ì–µ–æ–ø–æ–∑–∏—Ü–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è ===
TARGET_LAT = 41.356015
TARGET_LON = 69.314663
RADIUS_METERS = 150

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL ===
conn = psycopg2.connect(
    dbname=os.getenv("DB_NAME"),
    user=os.getenv("DB_USER"),
    password=os.getenv("DB_PASSWORD"),
    host=os.getenv("DB_HOST"),
    port=os.getenv("DB_PORT")
)
cursor = conn.cursor()

# === –†–∞—Å—á—ë—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
def calculate_distance(lat1, lon1, lat2, lon2):
    R = 6371000  # –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
    dlat = radians(lat2 - lat1)
    dlon = radians(lon2 - lon1)
    a = sin(dlat/2)**2 + cos(radians(lat1)) * cos(radians(lat2)) * sin(dlon/2)**2
    c = 2 * asin(sqrt(a))
    return R * c

# === /start
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    name = message.from_user.first_name

    cursor.execute("SELECT * FROM users WHERE user_id = %s", (user_id,))
    if cursor.fetchone() is None:
        cursor.execute("INSERT INTO users (user_id, name) VALUES (%s, %s)", (user_id, name))
        conn.commit()

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–∏–µ", "üìä –ú–æ–∏ –±–∞–ª–ª—ã")
    bot.send_message(
        message.chat.id,
        f"–ü—Ä–∏–≤–µ—Ç, {name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ YES+ üéâ\n–¢—ã –ø–æ–ª—É—á–∞–µ—à—å 20 –±–∞–ª–ª–æ–≤ –∑–∞ –∫–∞–∂–¥–æ–µ —É—á–∞—Å—Ç–∏–µ –≤ —Ç–∏–º–±–∏–ª–¥–∏–Ω–≥–µ.\n–ù–∞–∂–º–∏ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–∏–µ', –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –Ω–∞ –º–µ—Å—Ç–µ!",
        reply_markup=markup
    )

# === /score
@bot.message_handler(commands=['score'])
def score(message):
    user_id = message.from_user.id
    cursor.execute("SELECT points FROM users WHERE user_id = %s", (user_id,))
    result = cursor.fetchone()
    if result:
        bot.send_message(message.chat.id, f"–£ —Ç–µ–±—è {result[0]} –±–∞–ª–ª–æ–≤ üü¢")
    else:
        bot.send_message(message.chat.id, "–¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start.")

# === –ö–Ω–æ–ø–∫–∞ "–ú–æ–∏ –±–∞–ª–ª—ã"
@bot.message_handler(func=lambda m: m.text == "üìä –ú–æ–∏ –±–∞–ª–ª—ã")
def handle_score_button(message):
    score(message)

# === –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–∏–µ"
@bot.message_handler(func=lambda m: m.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–∏–µ")
def ask_location(message):
    keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    button_geo = types.KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)
    keyboard.add(button_geo)
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–∏–µ:", reply_markup=keyboard)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
@bot.message_handler(content_types=['location'])
def handle_location(message):
    user_id = message.from_user.id
    lat = message.location.latitude
    lon = message.location.longitude
    distance = calculate_distance(lat, lon, TARGET_LAT, TARGET_LON)

    cursor.execute("SELECT points, last_checkin FROM users WHERE user_id = %s", (user_id,))
    result = cursor.fetchone()

    if not result:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return

    points, last_checkin = result
    today = datetime.date.today()

    if last_checkin == today:
        bot.send_message(message.chat.id, "–¢—ã —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É—á–∞—Å—Ç–∏–µ —Å–µ–≥–æ–¥–Ω—è üòâ")
        return

    if distance <= RADIUS_METERS:
        new_points = points + 20
        cursor.execute("UPDATE users SET points = %s, last_checkin = %s WHERE user_id = %s", (new_points, today, user_id))
        conn.commit()
        bot.send_message(message.chat.id, "‚úÖ –£—á–∞—Å—Ç–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ! +20 –±–∞–ª–ª–æ–≤ üéâ")
    else:
        bot.send_message(message.chat.id, "–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤–Ω–µ –∑–æ–Ω—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è ‚ùå\n–ë–∞–ª–ª—ã –Ω–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã.")

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()

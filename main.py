import os
import logging
import datetime
import psycopg2
from psycopg2.extras import RealDictCursor
from dotenv import load_dotenv
import telebot
from telebot import types

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")

bot = telebot.TeleBot(BOT_TOKEN)
admin_state = {}
broadcast_history = []

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ===
def get_db_connection():
    return psycopg2.connect(DATABASE_URL, cursor_factory=RealDictCursor)

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ===
def is_admin(user_id):
    with get_db_connection() as conn:
        with conn.cursor() as cur:
            cur.execute("SELECT 1 FROM admins WHERE user_id = %s", (user_id,))
            return cur.fetchone() is not None

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ===
def admin_menu_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–¢–µ–∫—Å—Ç‚úâÔ∏è", "–§–æ—Ç–æüñºÔ∏è", "–í–∏–¥–µ–æüìπ")
    kb.add("–§–∞–π–ªüìé", "–õ–æ–∫–∞—Ü–∏—èüìç", "–û–ø—Ä–æ—Åüìä")
    kb.add("–£–¥–∞–ª–∏—Ç—å‚úÇÔ∏è")
    return kb

# === –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π ===
action_map = {
    "–¢–µ–∫—Å—Ç‚úâÔ∏è": "text",
    "–§–æ—Ç–æüñºÔ∏è": "photo",
    "–í–∏–¥–µ–æüìπ": "video",
    "–§–∞–π–ªüìé": "file",
    "–õ–æ–∫–∞—Ü–∏—èüìç": "location",
    "–û–ø—Ä–æ—Åüìä": "poll",
    "–£–¥–∞–ª–∏—Ç—å‚úÇÔ∏è": "clear",
}

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ===
@bot.message_handler(func=lambda m: m.text in action_map and is_admin(m.from_user.id))
def admin_cmd(m):
    action = action_map[m.text]
    admin_state[m.from_user.id] = {
        "action": action,
        "step": 1,
        "data": {}
    }
    if action == "poll":
        bot.send_message(m.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ–ø—Ä–æ—Å–∞:")
    else:
        bot.send_message(m.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ===
@bot.message_handler(content_types=['text', 'photo', 'video', 'document', 'location'])
def admin_state_handler(m):
    if m.from_user.id not in admin_state:
        return

    state = admin_state[m.from_user.id]
    action = state.get("action")
    step = state.get("step", 1)
    data = state.setdefault("data", {})

    # === –û–ü–†–û–° ===
    if action == "poll":
        if step == 1:
            data["question"] = m.text.strip()
            state["step"] = 2
            bot.send_message(m.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: –î–∞;–ù–µ—Ç):")
            return
        elif step == 2:
            options = [opt.strip() for opt in m.text.split(";") if opt.strip()]
            if len(options) < 2:
                bot.send_message(m.chat.id, "‚ùó –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
                return
            data["options"] = options
            state["step"] = 3
            bot.send_message(m.chat.id, f"–í–æ–ø—Ä–æ—Å: {data['question']}\n–í–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(options)}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É? (–¥–∞/–Ω–µ—Ç)")
            return
        elif step == 3:
            if m.text.lower() == "–¥–∞":
                sent = 0
                failed = 0
                with get_db_connection() as conn:
                    with conn.cursor() as cur:
                        cur.execute("SELECT user_id FROM users")
                        users = cur.fetchall()

                for (uid,) in users:
                    try:
                        msg = bot.send_poll(uid, data["question"], options=data["options"], is_anonymous=False)
                        broadcast_history.append((uid, msg.message_id))
                        sent += 1
                    except Exception:
                        failed += 1
                bot.send_message(m.chat.id, f"‚úÖ –û–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –û—à–∏–±–æ–∫: {failed}.")
            else:
                bot.send_message(m.chat.id, "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            admin_state.pop(m.from_user.id)
            return

    # === –¢–ï–ö–°–¢ ===
    elif action == "text" and m.content_type == "text":
        cnt = 0
        with get_db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("SELECT user_id FROM users")
                users = cur.fetchall()
        for (uid,) in users:
            try:
                bot.send_message(uid, m.text)
                cnt += 1
            except:
                pass
        bot.send_message(m.chat.id, f"–†–∞–∑–æ—Å–ª–∞–Ω–æ: {cnt}")
        admin_state.pop(m.from_user.id)

    # === –§–û–¢–û ===
    elif action == "photo" and m.content_type == "photo":
        file_id = m.photo[-1].file_id
        caption = m.caption or ""
        cnt = 0
        with get_db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("SELECT user_id FROM users")
                users = cur.fetchall()
        for (uid,) in users:
            try:
                bot.send_photo(uid, file_id, caption=caption)
                cnt += 1
            except:
                pass
        bot.send_message(m.chat.id, f"–§–æ—Ç–æ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ: {cnt}")
        admin_state.pop(m.from_user.id)

    # === –í–ò–î–ï–û ===
    elif action == "video" and m.content_type == "video":
        file_id = m.video.file_id
        caption = m.caption or ""
        cnt = 0
        with get_db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("SELECT user_id FROM users")
                users = cur.fetchall()
        for (uid,) in users:
            try:
                bot.send_video(uid, file_id, caption=caption)
                cnt += 1
            except:
                pass
        bot.send_message(m.chat.id, f"–í–∏–¥–µ–æ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ: {cnt}")
        admin_state.pop(m.from_user.id)

    # === –§–ê–ô–õ ===
    elif action == "file" and m.content_type == "document":
        file_id = m.document.file_id
        caption = m.caption or ""
        cnt = 0
        with get_db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("SELECT user_id FROM users")
                users = cur.fetchall()
        for (uid,) in users:
            try:
                bot.send_document(uid, file_id, caption=caption)
                cnt += 1
            except:
                pass
        bot.send_message(m.chat.id, f"–§–∞–π–ª —Ä–∞–∑–æ—Å–ª–∞–Ω: {cnt}")
        admin_state.pop(m.from_user.id)

    # === –õ–û–ö–ê–¶–ò–Ø ===
    elif action == "location" and m.content_type == "location":
        lat, lon = m.location.latitude, m.location.longitude
        cnt = 0
        with get_db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("SELECT user_id FROM users")
                users = cur.fetchall()
        for (uid,) in users:
            try:
                bot.send_location(uid, lat, lon)
                cnt += 1
            except:
                pass
        bot.send_message(m.chat.id, f"–õ–æ–∫–∞—Ü–∏—è —Ä–∞–∑–æ—Å–ª–∞–Ω–∞: {cnt}")
        admin_state.pop(m.from_user.id)

# === –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è ===
@bot.message_handler(func=lambda m: m.text == "–£–¥–∞–ª–∏—Ç—å‚úÇÔ∏è" and is_admin(m.from_user.id))
def clear_state(m):
    admin_state.pop(m.from_user.id, None)
    bot.send_message(m.chat.id, "–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ.")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ /start ===
@bot.message_handler(commands=['start'])
def start_handler(m):
    user_id = m.from_user.id
    with get_db_connection() as conn:
        with conn.cursor() as cur:
            cur.execute("INSERT INTO users (user_id) VALUES (%s) ON CONFLICT DO NOTHING", (user_id,))
            conn.commit()
    if is_admin(user_id):
        bot.send_message(m.chat.id, "–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", reply_markup=admin_menu_keyboard())
    else:
        bot.send_message(m.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏.")

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    bot.polling(none_stop=True)
